/* 개발환경이 리눅스라 스케치에서 한글이 써지지 않아 부득이하게 주석을 영어로 했습니다 (리눅스라 오류도 많았던...)*/

#include <VirtualWire.h>  // wire RF
#include <string.h>    // atoi
#include <LiquidCrystal.h> // lcd
#include <Time.h> // clock
#include <DHT11.h> //humid, temp

DHT11 DHT11(12);
//#include <Bounce2.h>      
//#define BOUNCE_LOCK_OUT
byte message[VW_MAX_MESSAGE_LEN];          //receive message     
byte messageLength = VW_MAX_MESSAGE_LEN;   //length

//Bounce bouncer = Bounce(); //
//int lcd_key = 0;
//int adc_key_in = 0;
int flag = 0; // flag
//int ledPin = 10;

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);           // select the pins used on the LCD panel 


// here hour, year, second.. unit
byte SpecialChar1[8]={        
  B00000,
  B01001,
  B01001,
  B10101,
  B10101,
  B10101,
  B00001,
  B00000
};
byte newChar[8] = {
  B01010,
  B01110,
  B01010,
  B01110,
  B11111,
  B00100,
  B01000,
  B01110
};
byte newChar2[8] = {
  B00100,
  B11111,
  B00100,
  B01010,
  B10001,
  B00100,
  B11111,
  B00000
};
byte newChar3[8] = {
  B10001,
  B10111,
  B10001,
  B10111,
  B11101,
  B00001,
  B01000,
  B01111
};

//don't need
/*byte newChar3[8] = {
 B01000,
 B01111,
 B10010,
 B01111,
 B01010,
 B11111,
 B00010,
 B00010
 };*/


byte newChar4[8] = {
  B01111,
  B01001,
  B01111,
  B01001,
  B01111,
  B01001,
  B10011,
  B00000
};
byte newChar5[8] = {
  B01111,
  B01001,
  B01001,
  B01111,
  B01001,
  B01001,
  B01111,
  B00000
};


void setup(){
  // start the library
  Serial.begin(9600); // 2017.06.14 add. // Serial only debug

  vw_set_rx_pin(2);  // wire data pin set
  //vw_set_ptt_pin(3); 
  vw_set_ptt_inverted(true); //lcd backlight error fix..
  vw_setup(2000);  //using all settings and initialize the library
  vw_rx_start(); 
  //bouncer.attach(12); 	//don't need button
  //bouncer.interval(5);
  //pinMode(ledPin, OUTPUT);
  setTime(23,59,59,31,12,2016);  //set time user
  lcd.begin(16, 2);
  lcd.createChar(0, SpecialChar1);
  lcd.createChar(1, newChar);
  lcd.createChar(2, newChar2);
  lcd.createChar(3, newChar3);
  lcd.createChar(4, newChar4);
  lcd.createChar(5, newChar5);
  //lcd.setCursor(0,0);             // set the LCD cursor   position 
  //lcd.print("Time now");  // print a simple message on the LCD

}

void loop(){

  //lcd.setCursor(4,1);   // move cursor to second line "1" and 9 spaces over
  //lcd.backlight();

  
  if( vw_get_message(message, &messageLength)) {       
    //Serial.println(*message);
    int command = processResponse((char*)message, 1);  //preprocessing message
    if (command==2) {
      /*
      switch (command) {
       case 1:                         
       break;
       case 2:                         
       flag=flag+1;    //LED OFF
       break;
       }*/
      flag=flag+1;  //flag  
    }
  }

  lcd.begin(16, 2);  //2017.06.14
  lcd.clear();
  lcd.setCursor(0,0);
  flag = flag%2;
  //adc_key_in = analogRead(0);
  //lcd_key = 0;
  if(flag == 0){  //flag 0

    digitalClockDisplay1();
    digitalClockDisplay2();
    
  }
  if(flag == 1 ) { //flag 1 
    temp_humid();
  }

  //lcd.print(millis()/1000);       // display seconds elapsed since power-up

  
  //lcd.setCursor(0,1);             // move to the begining of the second line
  delay(1000);
}
void temp_humid(){
    float temp, humi;
    DHT11.read(humi,temp); 
    lcd.print("temperate:");
    lcd.print(temp);
    lcd.setCursor(0,1);
    lcd.print("humidity :");
    lcd.print(humi);
}

void digitalClockDisplay1(){
  // digital clock display of the time
  lcd.setCursor(0, 0);
  lcd.print(year());
  lcd.write(byte(3));
  lcd.print(month());
  lcd.write(byte(4));
  lcd.print(day());
  lcd.write(byte(5));
}

void digitalClockDisplay2(){
  lcd.setCursor(7, 1);
  lcd.print(hour());
  lcd.write(byte(0));
  lcd.print(minute());
  lcd.write(byte(1));
  lcd.print(second());
  lcd.write(byte(2));

}

int processResponse(char* message, int pinCode) {
  char *p = message;
  Serial.println(p);
  
  char *buf;
  char *buf2;
   int o = 0;
   int pin;
   int command;
   Serial.println("receive:");		//Serial print
   
   while ((buf = strtok_r(p, ".-", &p)) != NULL)  {		//divide "." and "-"
     //Serial.println(buf[1]);
     //while ((buf2 = strtok_r(buf, "h",&buf2)) !=NULL){  
     //Serial.println(buf);

     if(buf != NULL){
       command = atoi(buf);		// result save "2"
     }
     
	//basic...
     /*
     if (o == 0) {  
     //char temp = strtok_r(buf, "-",&buf);       
     pin = atoi(buf);                            
     } else {
     char temp2 = strtok_r(buf,
     buf2 = atoi(buf);                        
     }
     o++;
     */


     //}

   }
   //buf2 = strtok_r(buf2,"2",&buf2);

   Serial.println(command); // check command
   
  /*
   if (pinCode == pin && command > 0) {               
   return command;
   } else {
   return 0; 
   }*/

  return command;

}


